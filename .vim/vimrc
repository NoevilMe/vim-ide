""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General Settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" You want Vim, not vi. When Vim finds a vimrc, 'nocompatible' is set anyway.
" We set it explicitely to make our position clear!"
set nocompatible

filetype plugin indent on          " required. Load plugins according to detected filetype.
syntax   on                        " Enable syntax highlighting.

let mapleader        =';'
let base16colorspace =256          " Access colors present in 256 colorspace"

set hidden                         " ctrlSpace. Switch between buffers without having to save first.
set wrap
set ruler                          " 标尺，用于显示光标位置的行号和列号，逗号分隔。每个窗口都有自己的标尺。如果窗口有状态行，标尺在那里显示。否则，它显示在屏幕的最后一行上
set number                         " 显示行号
set cursorline                     " 为光标所在行加下划线
set autoread                       " 文件在Vim之外修改过，自动重新读入
set ignorecase                     " 检索时忽略大小写
set incsearch                      " Highlight while searching with / or ?.
set hlsearch                       " hls. Keep matches highlighted.
set ignorecase                     " ignore case when searching
set smartcase                      " ignore case if search pattern is all lowercase, case-sensitive otherwise
set smarttab                       " insert tabs on the start of a line according to shiftwidth, not tabstop
set showmatch                      " 设置匹配模式，显示匹配的括号
set showcmd                        " 命令行显示输入的命令
set showmode                       " Show current mode in command-line.
set cindent                        " 使用 C/C++ 语言的自动缩进方式
set expandtab                      " expand tabs by default (overloadable per file type later)
set shiftround                     " use multiple of shiftwidth when indenting with '<' and '>'"
set nosmarttab
set smartindent                    " work in insert mode, auto indent
set autoindent                     " always set autoindenting on
set copyindent                     " copy the previous indentation on autoindenting
set foldenable                     " Enable folding
set list                           " Show non-printable characters.

set bs               =2            " 在insert模式下用退格键删除
set updatetime       =500          " detect git difference quickly
set history          =50           " set command history to 50 "历史记录50条
set helplang         =cn           " 帮助系统设置为中文
set foldcolumn       =1            " > 0, show fold column [0-12]
set foldmethod       =syntax       " 代码折叠. manual, indent, expr, syntax, diff, marker
set foldlevel        =100          " 启动vim时不要自动折叠代码 za，打开或关闭当前折叠；zM，关闭所有折叠；zR，打开所有折叠
set tabstop          =4            " a tab is four spaces
set softtabstop      =4            " when hitting <BS>, pretend like a tab is removed, even if spaces
set shiftwidth       =4            " number of spaces to use for autoindenting
set laststatus       =2            " show status line always
set t_Co             =256          " required
set background       =dark
set completeopt      =longest,menu " 让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)

set encoding         =utf-8        " internal encoding
set termencoding     =utf-8
set fileencodings    =ucs-bom,utf-8,gb18030,cp936,latin1

if has('multi_byte') && &encoding ==# 'utf-8'
    let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±'
else
    let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
endif"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Hotkeys
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" i(nore)map, work in insert mode
" v(nore)map, work in visual mode
" n(nore)map, work in normal mode


noremap <F4> :AddHeader<CR>
noremap <F5> :Autoformat<CR>

"映射光标在窗口间移动的快捷键
nmap <C-H> <C-W>h
nmap <C-J> <C-W>j
nmap <C-K> <C-W>k
nmap <C-L> <C-W>l

tnoremap <ESC> <c-\><c-n>
nnoremap <leader>sh :term<CR>

" Calendar
nnoremap <leader>cdr :Calendar<CR>
nnoremap <leader>cdy :Calendar -view=year<CR>
nnoremap <leader>cdm :Calendar -view=month<CR>
nnoremap <leader>cdw :Calendar -view=week<CR>
nnoremap <leader>cdc :Calendar -view=clock<CR>
"Header guard
nnoremap <leader>ha :HeaderguardAdd<CR>
" switch buffers
nnoremap bp :bp<CR>
nnoremap bn :bn<CR>
" window
nnoremap nt :NERDTreeToggle<CR>
nnoremap tb :TagbarToggle<CR>
"a.vim
nnoremap <leader>aa :A<CR>
nnoremap <leader>av :AV<CR>
nnoremap <leader>ah :AS<CR>
"YCM
nnoremap <leader>ji :YcmCompleter GoToInclude<CR>
nnoremap <leader>jg :YcmCompleter GoTo<CR>
nnoremap <leader>jr :YcmCompleter GoToReferences<CR>
nnoremap <leader>jc :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>jf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>rr :YcmCompleter RefactorRename
nnoremap <leader>rf :YcmCompleter Format<CR>            " indent 2 spaces always
nnoremap <leader>jt :YcmCompleter FixIt<CR>
nnoremap <leader>js :YcmDiags<CR>
nnoremap <leader>jo :YcmDebugInfo<CR>
"location list, if ale/syntastic is enabled
nnoremap <leader>lo :lopen<CR>
nnoremap <leader>lc :lclose<CR>
"clap
nnoremap <leader>pb :Clap buffers<CR>
nnoremap <leader>pf :Clap files<CR>
nnoremap <leader>pg :Clap grep<CR>
nnoremap <leader>pr :Clap registers<CR>
nnoremap <leader>pq :Clap quickfix<CR>
nnoremap <leader>pl :Clap lines<CR>
nnoremap <leader>pw :Clap grep ++query=<cword><CR>
"fugitive
nnoremap <leader>gs :Git<CR>
nnoremap <leader>gc :Git commit<CR>
nnoremap <leader>gd :Git diff<CR>
nnoremap <leader>gl :Git log<CR>
nnoremap <leader>gb :Git blame<CR>
nnoremap <leader>gm :Git mergetool<CR>
nnoremap <leader>gt :Git difftool<CR>
"indentline
nnoremap <leader>il :IndentLinesToggle<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')
" plugin from http://vim-scripts.org/vim/scripts.html
"Plug 'vim-scripts/L9'
" Make sure you use single quotes
Plug 'itchyny/calendar.vim'                                             " event and task manager
" search
Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary' }           " manager buffers, files, grep string etc
" Git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'                                           " [c, ]c to jump, <leader>hp to preview, <leader>hs to stage, <leader>hu to undo
Plug 'Xuyuanp/nerdtree-git-plugin'
" resource manager
" On-demand loading
Plug 'preservim/nerdtree', { 'on':  'NERDTreeToggle'  }
Plug 'majutsushi/tagbar'                                                " ctags is required
" syntax for language
Plug 'elzr/vim-json'                                                    " json
"Plug 'octol/vim-cpp-enhanced-highlight'                                " c++
" golang
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
" select
Plug 'kana/vim-textobj-user'                                            " depends
Plug 'kana/vim-textobj-entire'                                          " vae to select entire buffer
Plug 'terryma/vim-multiple-cursors'                                     " <c-n> select, <c-x> skip, <c-p> go prvious,  c/s/I/A to modify, v to exit this mode
" replace.
Plug 'dkprice/vim-easygrep'                                             " <leader>vv and <leader>vr are usually used
Plug 'tpope/vim-surround'                                               " Edit surroundings. cs to replace, ds to delete , yss to add
" locate
Plug 'vim-scripts/a.vim'                                                " swtich between source files and header files quickly. :A, :AS, :AV are usually used
Plug 'mhinz/vim-startify'
Plug 'haya14busa/incsearch.vim'
Plug 'easymotion/vim-easymotion'                                        " fast move and jump cursor in window. <leader><leader>w to move forward, <leader><leader>b to move backword
                                                                        " <leader><leader>s to move di-direction by 1 char
                                                                        " <leader><leader>j and <leader><leader>k jump by line
" guide
Plug 'sjl/gundo.vim'
" comment
Plug 'preservim/nerdcommenter'
" format
Plug 'Chiel92/vim-autoformat'
Plug 'axelf4/vim-strip-trailing-whitespace'
Plug 'junegunn/vim-easy-align'
" completer
Plug 'alpertuna/vim-header'
Plug 'NoevilMe/vim-headerguard'
" Multiple Plug commands can be written in a single line using | separators
" Snippet engines and snippets files.
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'                     " work with YCM. <c-n> or <c-p> select the snippet then <tab> to insert it.
" the best code completer for c++, python etc
Plug 'ycm-core/YouCompleteMe',{'do': './install.py --clangd-completer'}
" a syntax checking and highlight
Plug 'sheerun/vim-polyglot'
Plug 'vim-syntastic/syntastic'
"YCM diagnostic is from Clang while the ALE one is from GCC, but ale is unnecessary because of YCM.
"Plug 'dense-analysis/ale'"
" bracket
Plug 'jiangmiao/auto-pairs'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
 " Initialize plugin system
" display
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'Yggdroot/indentLine'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'ryanoasis/vim-devicons'
" theme
Plug 'altercation/vim-colors-solarized'
Plug 'morhetz/gruvbox'
call plug#end()"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins Settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" solarized {{
let g:solarized_termcolors          = 256
let g:solarized_termtrans           = 1
let g:solarized_contrast            = 'normal'
let g:solarized_visibility          = 'normal'
"}}

" colors {{
"colorscheme gruvbox
"colorscheme solarized
colorscheme Tomorrow-Night-Eighties
"colorscheme Tomorrow-Night-Bright
" }}

" copyright header {{
let g:header_auto_add_header        = 0
let g:header_field_author           = 'NoevilMe'
let g:header_field_author_email     = 'surpass168@live.com'
let g:header_field_copyright        = 'Copyright(C)2020 NoevilMe. All rights reserved.'
let g:header_field_timestamp_format = '%Y-%m-%d %H:%M:%S'
" }}

" Gundo {{
let g:gundo_prefer_python3          = v:true
"
" }}

" EasyAlign {{
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
" }}

"NERDTree{{
" Close vim if only the file explorer is open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Disable arrow icons at the left side of folders for NERDTree.
"let g:NERDTreeDirArrowExpandable = "\u00a0"
"let g:NERDTreeDirArrowCollapsible = "\u00a0"
let g:NERDTreeHighlightCursorline           = 0
let g:DevIconsEnableFoldersOpenClose        = 1 "Enables different glyphs for open and closed folders"
let g:WebDevIconsUnicodeDecorateFolderNodes = v:true
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }
"}}

"YCM{{
"" 自动补全配置
autocmd InsertLeave * if pumvisible() == 0|pclose|endif	"离开插入模式后自动关闭预览窗口
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"	"回车即选中当前项
"上下左右键的行为 会显示其他信息
"inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
"inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
"inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" :
""\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

"let g:ycm_use_clangd = 1
"let g:ycm_clangd_binary_path = ''

"youcompleteme  默认tab  s-tab 和自动补全冲突
""let g:ycm_key_list_select_completion=['<c-n>']
let g:ycm_key_list_select_completion = ['<Down>']
"let g:ycm_key_list_previous_completion=['<c-p>']
"let g:ycm_key_list_previous_completion = ['<Up>']
"let g:ycm_key_list_select_completion = ['<c-n>', '<Down>']  " 映射按键, 没有这个会拦截掉tab, 导致其他插件的tab不能用.
"let g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']"

"let g:ycm_confirm_extra_conf=0  "关闭加载.ycm_extra_conf.py提示
"let g:ycm_extra_conf_globlist = ['!~/*']

let g:ycm_collect_identifiers_from_tags_files=1	" 开启 YCM 基于标签引擎
let g:ycm_min_num_of_chars_for_completion=2	" 从第2个键入字符就开始罗列匹配项
let g:ycm_cache_omnifunc=0			" 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_seed_identifiers_with_syntax=1	" 语法关键字补全

let g:ycm_server_log_level = 'debug'
let g:ycm_path_to_python_interpreter = '/usr/bin/python3'
let g:ycm_server_python_interpreter = '/usr/bin/python3'

"let g:ycm_global_ycm_extra_conf =
"'~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
"
"nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>	"force recomile with
"syntastic
"nnoremap <leader>lo :lopen<CR>				"open locationlist
"nnoremap <leader>lc :lclose<CR>				"close
"locationlist
"inoremap <leader><leader> <C-x><C-o>
let g:ycm_complete_in_comments = 1
"let g:ycm_complete_in_strings = 1
"let g:ycm_collect_identifiers_from_comments_and_strings = 0
"}}

"Airline {{
let g:airline_theme="durant"
"这个是安装字体后 必须设置此项"
let g:airline_powerline_fonts = 1 
"打开tabline功能,方便查看Buffer和切换，这个功能比较不错"
"我还省去了minibufexpl插件，因为我习惯在1个Tab下用多个buffer"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
" 关闭状态显示空白符号计数
"let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'
let g:airline_exclude_preview = 1
"}}

" vim-cpp-enhanced-highlight {{
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
"let g:cpp_class_decl_highlight = 1
let g:cpp_posix_standard = 1
" }}

" Gitgutter {{
let g:gitgutter_terminal_reports_focus = 0
" }}

"----------DOCUMENT---------
"do not indent when paste
"set paste , before pasting
"set nopaste , after pasting

let s:vim_info_dir = expand('~/.vim/files/info')
if !isdirectory(s:vim_info_dir)
    silent! call mkdir(s:vim_info_dir, 'p')
endif
set viminfo='100,n$HOME/.vim/files/info/viminfo
